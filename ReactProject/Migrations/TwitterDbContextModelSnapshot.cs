// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactProject.Data;

#nullable disable

namespace ReactProject.Migrations
{
    [DbContext(typeof(TwitterDbContext))]
    partial class TwitterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReactProject.Models.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TwitterPostId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TwitterPostId");

                    b.HasIndex("TwitterPostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ReactProject.Models.TwitterPost", b =>
                {
                    b.Property<int>("TwitterPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TwitterPostId"));

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ImageURl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Shares")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TwitterPostId");

                    b.HasIndex("UserId");

                    b.ToTable("TwitterPosts");

                    b.HasData(
                        new
                        {
                            TwitterPostId = 1,
                            ImageURl = "https://localhost:7167/images/cat.png",
                            Shares = 0,
                            Text = "Hello world!",
                            UserId = 1
                        },
                        new
                        {
                            TwitterPostId = 2,
                            ImageURl = "https://localhost:7167/images/cat.png",
                            Shares = 0,
                            Text = "Hello 23 world!",
                            UserId = 3
                        },
                        new
                        {
                            TwitterPostId = 3,
                            ImageURl = "https://localhost:7167/images/cat.png",
                            Shares = 0,
                            Text = "Hello 3 world!",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ReactProject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("https://localhost:7167/images/default.jpg");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedOnDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "Test@Test.com",
                            Password = "TestPassword",
                            UserName = "MissUser"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedOnDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "Test@Test.com",
                            Password = "TestPassword",
                            UserName = "MisterUser"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedOnDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "Test@Test.com",
                            ImageUrl = "https://localhost:7167/images/cat.png",
                            Password = "TestPassword",
                            UserName = "TestUser"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedOnDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "Test@Test.com",
                            Password = "TestPassword",
                            UserName = "Miss4User"
                        });
                });

            modelBuilder.Entity("UserFollows", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingId")
                        .HasColumnType("int");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserFollows");

                    b.HasData(
                        new
                        {
                            FollowerId = 1,
                            FollowingId = 2
                        },
                        new
                        {
                            FollowerId = 1,
                            FollowingId = 3
                        },
                        new
                        {
                            FollowerId = 4,
                            FollowingId = 1
                        });
                });

            modelBuilder.Entity("ReactProject.Models.Like", b =>
                {
                    b.HasOne("ReactProject.Models.TwitterPost", "TwitterPost")
                        .WithMany("Likes")
                        .HasForeignKey("TwitterPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactProject.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TwitterPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReactProject.Models.TwitterPost", b =>
                {
                    b.HasOne("ReactProject.Models.User", "User")
                        .WithMany("TwitterPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserFollows", b =>
                {
                    b.HasOne("ReactProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ReactProject.Models.TwitterPost", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ReactProject.Models.User", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("TwitterPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
